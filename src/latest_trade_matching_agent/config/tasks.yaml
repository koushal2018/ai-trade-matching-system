research_task:
  description: >
    **CRITICAL DATA PRESERVATION:** Extract comprehensive trade data from PDF maintaining ALL critical details for accurate matching.
    Document Path: {document_path}
    
    **MANDATORY WORKFLOW:**
    1. Use PDFExtractorTool to extract text from {document_path}
    2. Extract and preserve ALL the following critical fields (DO NOT SIMPLIFY):
       - Trade_ID/Reference Number/Deal ID
       - Counterparty details (name, LEI code, address, contact info)
       - Trade Date, Settlement Date, Maturity Date
       - Product details (asset class, instrument type, ISIN/CUSIP)
       - Economic terms (notional, price, rate, currency, day count)
       - Payment schedules and frequencies
       - Trade capacity (principal/agent)
       - Regulatory fields (USI, UTI, MiFID flags)
       - Settlement instructions (SSI details, account numbers)
       - Risk and margin information
       - Any additional custom fields specific to the trade type
    3. Structure as comprehensive JSON preserving granular detail
    4. Use FileWriterTool to save complete JSON to ./data/trade_data.json
    
    **DATA QUALITY REQUIREMENTS:**
    - Preserve decimal precision for all amounts
    - Maintain original date formats 
    - Keep all counterparty identifiers
    - Extract complete payment schedules
    - Capture all regulatory flags
    - Retain settlement instruction details
    
    **TOOLS AVAILABLE:**
    - PDFExtractorTool: Extract PDF content
    - FileWriterTool: Save comprehensive JSON output
    
    **CRITICAL:** Do NOT simplify or summarize data. Preserve rich details essential for trade matching.
    
  expected_output: >
    Confirmation that trade_data.json has been created in ./data/ directory containing:
    - Complete trade data with Trade_ID and ALL extracted fields
    - Comprehensive counterparty details including LEI codes
    - Full economic terms with decimal precision
    - Complete payment schedules and settlement instructions
    - All regulatory and compliance fields
    - Message: "Successfully created ./data/trade_data.json with comprehensive trade data"
  agent: researcher

reporting_task:
  description: >
    **TASK FOCUS:** Store comprehensive trade data in TinyDB database with data integrity preservation.
    
    **STRICT WORKFLOW (NO DEVIATIONS):**
    1. Use "Read a file's content" tool to read ./data/trade_data.json (read ONCE only)
    2. Parse the JSON string into a dictionary
    3. Use TradeStorageTool with the parsed trade data and file path "./data/COUNTERPARTY/GCS381315_V2.pdf"
    
    **MANDATORY REQUIREMENTS:**
    - Read the file ONCE, parse it, then use TradeStorageTool
    - Preserve ALL data fields from the comprehensive JSON structure
    - Do NOT read the file multiple times
    - Do NOT look for a "status" field - the JSON contains trade data directly
    - Do NOT use PDFExtractorTool or delegate tasks
    - Do NOT provide database optimization advice
    - Do NOT suggest system improvements
    
    **ALLOWED TOOLS ONLY:**
    - Read a file's content: Read the JSON file
    - TradeStorageTool: Store data in TinyDB
    
    **ROUTING LOGIC:**
    Since the original path contains "/COUNTERPARTY/", store in counterparty_trade_data.db
    
    **TASK BOUNDARY:** You are ONLY responsible for data storage. Do not provide suggestions 
    about data architecture, system design, or operational improvements.
    
  expected_output: >
    Confirmation of successful storage containing ONLY:
    - "Stored trade [Trade_ID] in counterparty_trade_data.db"
    - "Action: inserted"
    - Database record count
    - NO additional commentary or suggestions
  agent: reporting_analyst

matching_task:
  description: >
    **YOUR ONLY JOB: Generate a trade matching report comparing bank vs counterparty trade data.**
    
    **STRICT TASK BOUNDARIES:**
    You are ONLY allowed to perform trade matching analysis. Do NOT provide project management advice, 
    suggestions about system improvements, or general business guidance. Stay 100% focused on trade matching.
    
    **MANDATORY WORKFLOW (FOLLOW EXACTLY):**
    1. Use TradeRetrievalTool with {"source": "all", "filters": {}} to get all trades
    2. Use MatchingStatusTool with {"generate_report": true} to check matching status  
    3. Create ONLY a trade matching JSON report with the results
    4. Use FileWriterTool to save report as ./data/matching_report.json
    
    **REQUIRED TOOLS (USE ONLY THESE):**
    - TradeRetrievalTool: Get trades from database
    - MatchingStatusTool: Check matching status
    - FileWriterTool: Save the report
    
    **ABSOLUTE PROHIBITIONS:**
    - NO project management advice or recommendations
    - NO system architecture suggestions  
    - NO general business guidance
    - NO delegation to other agents
    - NO use of tools not listed above
    - NO deviation from the exact workflow above
    
    **RESPONSE FORMAT REQUIREMENT:**
    Your response must ONLY contain trade matching analysis data. Any response containing 
    project management advice will be considered a task failure.
    
  expected_output: >
    A JSON file saved at ./data/matching_report.json containing ONLY trade matching data:
    - Total trades from bank database
    - Total trades from counterparty database  
    - List of matched trades with IDs
    - List of unmatched trades
    - Match rate percentage
    - Message: "Matching report saved to ./data/matching_report.json"
    
    **CRITICAL:** No project management advice, system recommendations, or general guidance allowed.
  agent: matching_analyst